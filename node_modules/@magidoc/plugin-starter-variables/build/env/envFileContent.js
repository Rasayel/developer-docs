import _ from 'lodash';
import magidoc from '../variables/magidoc.js';

function toVariablesFile(options, supportedVariables) {
    return asVariablesString(buildEnv(options, supportedVariables));
}
function asVariablesString(env) {
    return JSON.stringify(env);
}
function buildEnv(options, supportedVariables) {
    let newRecord = {};
    const unsupportedVariables = [];
    _.forEach(options, (value, key) => {
        const variable = supportedVariables.find((option) => option.name === key);
        if (!variable) {
            unsupportedVariables.push(key);
            return;
        }
        newRecord = {
            ...newRecord,
            ...variable.asEnv(value),
        };
    });
    if (unsupportedVariables.length > 0) {
        throw new UnsupportedVariablesError(`Options [${unsupportedVariables.toString()}] are not supported... Supported option names are [${supportedVariables
            .map((value) => value.name)
            .join(', ')}]`, unsupportedVariables);
    }
    insertDefaultVariables(newRecord);
    return newRecord;
}
function insertDefaultVariables(newRecord) {
    newRecord[magidoc.MAGIDOC_GENERATE.key] = 'true';
}
class UnsupportedVariablesError extends Error {
    unsupportedVariables;
    constructor(message, unsupportedVariables) {
        super(message);
        this.unsupportedVariables = unsupportedVariables;
        this.name = 'UnsupportedVariableError';
    }
}

export { UnsupportedVariablesError, toVariablesFile };
//# sourceMappingURL=envFileContent.js.map
