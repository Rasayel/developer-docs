import { pathToFileURL } from 'url';
import z from 'zod';
import { formatZodIssues } from '../config/zod.js';

const ZMagidocTemplateConfig = z.object({
    SUPPORTED_OPTIONS: z.array(z.object({
        name: z.string().min(1),
        key: z.string().min(1),
        asEnv: z.function(),
        zod: z.object({
            type: z.function(),
        }),
        get: z.function(),
        getOrDefault: z.function(),
    })),
    SCHEMA_TARGET_LOCATION: z.string().min(1),
    STATIC_ASSETS_LOCATION: z.string().min(1),
    ENV_FILE_LOCATION: z.string().min(1),
});
async function loadTemplateConfig(path) {
    return parseTemplateConfig((await import(pathToFileURL(path).toString())));
}
function parseTemplateConfig(content) {
    const result = ZMagidocTemplateConfig.safeParse(content);
    if (!result.success) {
        const formattedIssues = formatZodIssues(result.error.issues);
        throw new Error(`Invalid template configuration found:\nConfig: ${JSON.stringify(content)}\n${formattedIssues.join('\n')}\n\nThis error is not supposed to occur and is likely a misconfiguration of the template. You should open an issue if you ever see it.`);
    }
    // This is rather unsafe. We validate the object roughly and automatically
    // cast the content as a template config instead of using zod result
    // This is done just to have basic assertions on the template config to make sure it was not tempered accidentally
    // This is an attempt to protect against incomplete configuration, but it is not bulletproof
    return content;
}

export { loadTemplateConfig, parseTemplateConfig };
//# sourceMappingURL=config.js.map
