import { templates } from '@magidoc/plugin-starter-variables';
import { executeAllTasks } from '../../tasks/runner.js';
import { cleanTask } from '../../tasks/all/clean.js';
import { copyStaticAssetsTask } from '../../tasks/all/copyStaticAssets.js';
import { determineTmpDirectoryTask } from '../../tasks/all/determineTmpDir.js';
import { fetchTemplateTask } from '../../tasks/all/fetchTemplate.js';
import { installDependenciesTask } from '../../tasks/all/installDependencies.js';
import { loadGraphQLSchemaTask } from '../../tasks/all/loadGraphqlSchema.js';
import { resolveTemplateConfigurationTask } from '../../tasks/all/resolveTemplateConfig.js';
import { selectPackageManagerTask } from '../../tasks/all/selectPackageManager.js';
import { unzipTemplateTask } from '../../tasks/all/unzipTemplate.js';
import { warnVersionTask } from '../../tasks/all/warnVersion.js';
import { writeEnvFileTask } from '../../tasks/all/writeEnvFile.js';
import { loadFileConfiguration } from '../utils/loadConfigFile.js';
import { cyan } from '../utils/outputColors.js';
import { watchFiles } from '../utils/watch.js';
import { printSeparator, printInfo } from '../utils/log.js';
import { getPortAvailability } from '../utils/port.js';

async function runDevelopmentServer(config) {
    const ctx = await executeAllTasks([
        warnVersionTask(config),
        determineTmpDirectoryTask(config),
        cleanTask(config),
        selectPackageManagerTask(config),
        fetchTemplateTask(config),
        unzipTemplateTask(config),
        installDependenciesTask(),
        resolveTemplateConfigurationTask(),
        loadGraphQLSchemaTask(config),
        copyStaticAssetsTask(config),
        writeEnvFileTask(config),
    ]);
    const availability = await getPortAvailability(config.host, config.port);
    if (!availability.available) {
        throw new Error(`Port ${config.port} is not available: ${availability.reason} ${availability.code ? `(${availability.code})` : ''}`);
    }
    // We don't have a choice to print this before.
    printServerListening(config);
    await Promise.all([
        ctx.packageManager.startDevServer({
            cwd: ctx.tmpDirectory.path,
            host: config.host,
            port: config.port,
        }),
        watchFiles([
            config.magidocConfigLocation,
            config.website.staticAssets,
            ...config.dev.watch,
        ], async () => {
            const newMagidocConfig = await loadFileConfiguration(config.magidocConfigLocation, config.stacktrace);
            const newDevConfig = {
                ...config,
                ...newMagidocConfig,
            };
            await executeAllTasks([
                loadGraphQLSchemaTask(newDevConfig),
                copyStaticAssetsTask(newDevConfig),
                writeEnvFileTask(newDevConfig),
            ], {
                ctx,
                silent: true,
            });
        }),
    ]);
}
function printServerListening(config) {
    setTimeout(() => {
        const root = config.website.options[templates.SITE_ROOT.name];
        printSeparator();
        printInfo(`Server listening on ${cyan(`http://${config.host}:${config.port}${String(root || '')}`)}`);
    }, 500);
}

export { runDevelopmentServer as default };
//# sourceMappingURL=index.js.map
