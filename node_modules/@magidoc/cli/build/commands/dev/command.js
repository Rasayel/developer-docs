import { Option } from 'commander';
import { loadFileConfiguration } from '../utils/loadConfigFile.js';
import { withStacktrace } from '../utils/withStacktrace.js';
import runDevelopmentServer from './index.js';
import path from 'path';
import { newPortOption, PACKAGE_MANAGER_OPTION, CONFIG_FILE_OPTION, CLEAN_OPTION, STACKTRACE_OPTION } from '../utils/commander.js';

function buildDevCommand(program) {
    program
        .command('dev')
        .description('Starts a development server with hot-reload as changes occur to watched files.')
        .addOption(new Option('-h|--host <host>', 'The host to bind the development server to.').default('localhost'))
        .addOption(newPortOption('The port to bind the development server to.', 3000))
        .addOption(PACKAGE_MANAGER_OPTION())
        .addOption(CONFIG_FILE_OPTION())
        .addOption(CLEAN_OPTION())
        .addOption(STACKTRACE_OPTION())
        .action(async ({ packageManager, host, port, file, stacktrace, clean, }) => {
        const fileConfiguration = await loadFileConfiguration(file, stacktrace);
        if (!fileConfiguration) {
            process.exitCode = 1;
            return;
        }
        await withStacktrace(stacktrace, async () => {
            await runDevelopmentServer({
                ...fileConfiguration,
                magidocConfigLocation: path.resolve(file),
                host,
                port,
                stacktrace,
                packageManager,
                clean,
            });
        });
    });
}

export { buildDevCommand as default };
//# sourceMappingURL=command.js.map
