import { ZMagidocConfiguration } from './types.js';
import { templates } from '@magidoc/plugin-starter-variables';
import _ from 'lodash';
import z from 'zod';
import { red } from '../commands/utils/outputColors.js';
import { formatZodIssues } from './zod.js';

function parseConfiguration(content) {
    const result = ZMagidocConfiguration.safeParse(content);
    if (result.success) {
        validateOptions(result.data.website.options);
        return result.data;
    }
    throwConfigurationError(result.error.issues);
}
function validateOptions(options) {
    const allOptionsByName = _.keyBy(Object.values(templates), (template) => String(template.name));
    let issues = [];
    _.forEach(options, (value, key) => {
        const variable = allOptionsByName[key];
        const path = ['website', 'options', key];
        if (!variable) {
            issues.push({
                message: `No option available with name '${key}'`,
                code: 'custom',
                path,
            });
            return;
        }
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        const zodType = variable.zod.type(z);
        const result = zodType.safeParse(value);
        if (!result.success) {
            issues = issues.concat(result.error.issues.map((issue) => ({
                ...issue,
                path: path.concat(issue.path),
            })));
        }
    });
    if (issues.length > 0) {
        throwConfigurationError(issues);
    }
}
function throwConfigurationError(issues) {
    const formattedIssues = formatZodIssues(issues);
    const pluralIssue = issues.length > 1 ? 'issues' : 'issue';
    const issuesText = red(`${issues.length} ${pluralIssue}`);
    throw new Error(`${issuesText} found with the Magidoc configuration provided:\n${formattedIssues.join('\n')}`);
}

export { parseConfiguration };
//# sourceMappingURL=parser.js.map
