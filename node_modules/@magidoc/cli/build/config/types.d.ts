import z from 'zod';
export declare const ZIntrospectionConfiguration: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"url">;
    url: z.ZodString;
    query: z.ZodOptional<z.ZodString>;
    method: z.ZodDefault<z.ZodEnum<["GET", "POST", "PUT", "DELETE"]>>;
    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    query?: string | undefined;
    headers?: Record<string, string> | undefined;
    type: "url";
    url: string;
    method: "GET" | "POST" | "PUT" | "DELETE";
}, {
    query?: string | undefined;
    method?: "GET" | "POST" | "PUT" | "DELETE" | undefined;
    headers?: Record<string, string> | undefined;
    type: "url";
    url: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"sdl">;
    paths: z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "atleastone">;
}, "strip", z.ZodTypeAny, {
    type: "sdl";
    paths: [string, ...string[]];
}, {
    type: "sdl";
    paths: [string, ...string[]];
}>, z.ZodObject<{
    type: z.ZodLiteral<"raw">;
    content: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "raw";
    content: string;
}, {
    type: "raw";
    content: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"none">;
}, "strip", z.ZodTypeAny, {
    type: "none";
}, {
    type: "none";
}>]>;
export declare const ZWebsiteConfiguration: z.ZodObject<{
    template: z.ZodEffects<z.ZodString, string, string>;
    templateVersion: z.ZodDefault<z.ZodString>;
    output: z.ZodDefault<z.ZodEffects<z.ZodString, string, string>>;
    staticAssets: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    options: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    staticAssets?: string | undefined;
    options: Record<string, unknown>;
    template: string;
    templateVersion: string;
    output: string;
}, {
    options?: Record<string, unknown> | undefined;
    templateVersion?: string | undefined;
    output?: string | undefined;
    staticAssets?: string | undefined;
    template: string;
}>;
export declare const ZDevConfiguration: z.ZodDefault<z.ZodObject<{
    watch: z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">>;
}, "strip", z.ZodTypeAny, {
    watch: string[];
}, {
    watch?: string[] | undefined;
}>>;
export declare const ZMagidocConfiguration: z.ZodObject<{
    introspection: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"url">;
        url: z.ZodString;
        query: z.ZodOptional<z.ZodString>;
        method: z.ZodDefault<z.ZodEnum<["GET", "POST", "PUT", "DELETE"]>>;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        query?: string | undefined;
        headers?: Record<string, string> | undefined;
        type: "url";
        url: string;
        method: "GET" | "POST" | "PUT" | "DELETE";
    }, {
        query?: string | undefined;
        method?: "GET" | "POST" | "PUT" | "DELETE" | undefined;
        headers?: Record<string, string> | undefined;
        type: "url";
        url: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"sdl">;
        paths: z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "atleastone">;
    }, "strip", z.ZodTypeAny, {
        type: "sdl";
        paths: [string, ...string[]];
    }, {
        type: "sdl";
        paths: [string, ...string[]];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"raw">;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "raw";
        content: string;
    }, {
        type: "raw";
        content: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"none">;
    }, "strip", z.ZodTypeAny, {
        type: "none";
    }, {
        type: "none";
    }>]>;
    website: z.ZodObject<{
        template: z.ZodEffects<z.ZodString, string, string>;
        templateVersion: z.ZodDefault<z.ZodString>;
        output: z.ZodDefault<z.ZodEffects<z.ZodString, string, string>>;
        staticAssets: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        options: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        staticAssets?: string | undefined;
        options: Record<string, unknown>;
        template: string;
        templateVersion: string;
        output: string;
    }, {
        options?: Record<string, unknown> | undefined;
        templateVersion?: string | undefined;
        output?: string | undefined;
        staticAssets?: string | undefined;
        template: string;
    }>;
    dev: z.ZodDefault<z.ZodObject<{
        watch: z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">>;
    }, "strip", z.ZodTypeAny, {
        watch: string[];
    }, {
        watch?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    introspection: {
        query?: string | undefined;
        headers?: Record<string, string> | undefined;
        type: "url";
        url: string;
        method: "GET" | "POST" | "PUT" | "DELETE";
    } | {
        type: "sdl";
        paths: [string, ...string[]];
    } | {
        type: "raw";
        content: string;
    } | {
        type: "none";
    };
    website: {
        staticAssets?: string | undefined;
        options: Record<string, unknown>;
        template: string;
        templateVersion: string;
        output: string;
    };
    dev: {
        watch: string[];
    };
}, {
    dev?: {
        watch?: string[] | undefined;
    } | undefined;
    introspection: {
        query?: string | undefined;
        method?: "GET" | "POST" | "PUT" | "DELETE" | undefined;
        headers?: Record<string, string> | undefined;
        type: "url";
        url: string;
    } | {
        type: "sdl";
        paths: [string, ...string[]];
    } | {
        type: "raw";
        content: string;
    } | {
        type: "none";
    };
    website: {
        options?: Record<string, unknown> | undefined;
        templateVersion?: string | undefined;
        output?: string | undefined;
        staticAssets?: string | undefined;
        template: string;
    };
}>;
export type IntrospectionConfiguration = z.infer<typeof ZIntrospectionConfiguration>;
export type DevConfiguration = z.infer<typeof ZDevConfiguration>;
export type WebsiteConfiguration = z.infer<typeof ZWebsiteConfiguration>;
export type MagidocConfiguration = z.infer<typeof ZMagidocConfiguration>;
